@page "/LogIn"
@using System.ComponentModel.DataAnnotations
@using Blazored.SessionStorage
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Server
@using RealCreate.Web.AuthProviders
@using RealCreate.Web.Controllers
@using RealCreate.Web.Services
@using static System.Net.WebRequestMethods
@using System.Text.Json
@using RealCreate.Web.Responses
@using System.Security.Claims
@inject NavigationManager NavManager
@inject LocalStorageService localStorageService
@inject IHttpContextAccessor HttpAccessor
@inject AuthServices authService
@inject IHostEnvironmentAuthenticationStateProvider HostAuthentication;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject CookieAuthStateProvider CookieAuthProvider;
@rendermode InteractiveServer
@inject ISessionStorageService SessionStorage

<h3>Log In</h3>

<AuthorizeView>
    Hello @HttpAccessor.HttpContext.User.Identity?.Name Authenticated
</AuthorizeView>

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin" FormName="LoginForm" method="post">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <label for="username">Username:</label>
    <InputText id="username" @bind-Value="loginModel.Email" class="form-control" />
    <span class="text-danger">@errorMessage</span>

    <label for="password">Password:</label>
    <InputText id="password" type="password" @bind-Value="loginModel.Password" class="form-control" />
    <span class="text-danger">@errorMessage</span>

    <button type="submit" class="btn btn-primary mt-2">Log In</button>
</EditForm>

@code {

    [SupplyParameterFromForm]
    private LoginModel loginModel {get; set; }
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        loginModel ??= new();
    }
    private string? authToken;


    private async Task HandleLogin()
    {
        HttpClient httpClient = new HttpClient();

        var response = await httpClient.PostAsJsonAsync("http://localhost:5430/api/account/login", loginModel);

        if (response.IsSuccessStatusCode)
        {
            authToken = await response.Content.ReadAsStringAsync();
            LoginToken loginToken = JsonSerializer.Deserialize<LoginToken>(authToken);

            await SessionStorage.SetItemAsync("authToken", loginToken.token);

            string jwtCookie = await SessionStorage.GetItemAsync<string>("authToken");
            ClaimsIdentity claims = authService.GetIdentityFromToken(jwtCookie);

            var listClaims = authService.GetClaimsAsync(jwtCookie);

            var identity = new ClaimsIdentity(listClaims, CookieAuthenticationDefaults.AuthenticationScheme);

            // var principal = new ClaimsPrincipal(claims);

            var principal = new ClaimsPrincipal(identity);


            HostAuthentication!.SetAuthenticationState(Task.FromResult(new AuthenticationState(principal)));

            // AuthenticationState authState = await AuthenticationStateProvider!.GetAuthenticationStateAsync();

            // CookieAuthProvider.SetAuthenticationState(Task.FromResult(authState));

            NavManager!.NavigateTo("/");
            StateHasChanged();


            NavManager!.NavigateTo("/");
            StateHasChanged();
        }
        else
        {
            // Handle unsuccessful login here
            errorMessage = "Invalid username or password";
        }

    }
    public class LoginModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }
    }

    public class LoginToken
    {
        public string token { get; set; }
    }
}
